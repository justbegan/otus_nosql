Шаг 1: Подготовка инфраструктуры
  Установить MongoDB на каждый сервер. Используйте официальную документацию MongoDB для установки.
      Для шардированных кластеров: MongoDB Sharding Documentation
      Для настройки репликации: MongoDB Replica Set Documentation

Шаг 2: Настройка кластера конфигурации
    На трех серверах создаем конфигурационный кластер:
        Запустите конфигурационный инстанс на каждом сервере:
          mongod --configsvr --replSet configReplSet --port 27019 --dbpath /data/configdb --bind_ip_all

    Объединяем эти инстансы в репликационный набор: На одном из конфигурационных серверов запускаем mongo и вводим:
        rs.initiate(
          {
            _id: "configReplSet",
            configsvr: true,
            members: [
              { _id: 0, host: "config1:27019" },
              { _id: 1, host: "config2:27019" },
              { _id: 2, host: "config3:27019" }
            ]
          }
        );


Шаг 3: Настройка шардов

    На трех разных серверах создаем реплицированные шард-кластеры (по три ноды для каждого шард-набора):

        Запускаем mongod с параметрами репликации для каждого инстанса:
          mongod --shardsvr --replSet shard1 --port 27018 --dbpath /data/shard1 --bind_ip_all

        Повторите шаги для shard2 и shard3.

    Инициализация репликационных наборов:
    
      Для каждого шард-набора, используя mongo:
          rs.initiate(
            {
              _id: "shard1",
              members: [
                { _id: 0, host: "shard1_1:27018" },
                { _id: 1, host: "shard1_2:27018" },
                { _id: 2, host: "shard1_3:27018" }
              ]
            }
          );
    
      Аналогичные команды используйте для шардов shard2 и shard3.

Шаг 4: Настройка балансировщика (mongos)

    На отдельном сервере запускаем mongos, указывая адреса всех конфигурационных нод:
      mongos --configdb configReplSet/config1:27019,config2:27019,config3:27019 --bind_ip_all --port 27017

    Добавляем шард-реплицированные наборы к кластеру через mongo (подключаясь к mongos):
      sh.addShard("shard1/shard1_1:27018,shard1_2:27018,shard1_3:27018");
      sh.addShard("shard2/shard2_1:27018,shard2_2:27018,shard2_3:27018");
      sh.addShard("shard3/shard3_1:27018,shard3_2:27018,shard3_3:27018");

Шаг 5: Выбор ключа шардирования

    Выбираем коллекцию для шардирования, к примеру, коллекцию orders.

    Создаем индекс на поле, по которому будем шардировать, например customerId:
      db.orders.createIndex({customerId: 1});

    Включаем шардирование для базы данных и коллекции:
      sh.enableSharding("ecommerce");
      sh.shardCollection("ecommerce.orders", {customerId: 1});

Шаг 6: Нагрузка кластера данными

    Заполняем коллекцию orders тестовыми данными:
      for (let i = 0; i < 1000000; i++) {
        db.orders.insert({ customerId: i % 1000, orderId: i, amount: Math.random() * 1000 });
      }

    Проверяем, как данные распределяются между шардами:
      sh.status();

Шаг 7: Мониторинг и балансировка

    Проверяем балансировку данных между шардами с помощью команды:
      db.printShardingStatus();

    Перебалансировка данных между шардами происходит автоматически в зависимости от нагрузки на них. Можно принудительно инициировать балансировку:
      sh.startBalancer();

Шаг 8: Отключение и восстановление нод

    Отключаем один из инстансов на шарде:

      sudo systemctl stop mongod
    
    MongoDB автоматически переключится на реплицированный инстанс в пределах того же репликационного набора.
    
    Восстановление инстанса: Поднимаем инстанс обратно:

      sudo systemctl start mongod

    MongoDB автоматически синхронизирует данные с другими нодами.

Шаг 9: Настройка аутентификации и многоролевого доступа

    Включаем аутентификацию:

        В /etc/mongod.conf добавляем:

        security:
          authorization: enabled

    Перезапускаем все инстансы MongoDB.

    Создаем пользователя администратора: Подключаемся к MongoDB через mongos и создаем администратора:

    use admin;
    db.createUser({
      user: "admin",
      pwd: "adminPassword",
      roles: [{ role: "root", db: "admin" }]
    });

    Создаем пользователей для каждой роли: Например, создаем роль для администратора шардов:
    
    db.createRole({
      role: "shardAdmin",
      privileges: [{ resource: { db: "config", collection: "" }, actions: ["enableSharding"] }],
      roles: []
    });

    Создаем пользователя с ролью:
    
      db.createUser({
        user: "shardAdminUser",
        pwd: "password",
        roles: ["shardAdmin"]
      });

Шаг 10: Итоги и проблемы

    Результаты:
        Данные успешно распределились между шардами.
        Перебалансировка данных работала автоматически.
        После отключения и восстановления нод репликация сработала, и данные синхронизировались.

    Проблемы:
        Настройка репликации и шардирования требует внимания к деталям, особенно в конфигурации.
        Важно следить за балансировщиком, так как при высокой нагрузке могут возникать задержки.
